{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cdd05409-f445-46f5-9ccf-5d4069ea1974",
   "metadata": {},
   "source": [
    "Question1 -> Create a vehicle class with an init method having instance variables as name_of_vehicle, max_speed\n",
    "             and average_of_vehicle.\n",
    "             \n",
    "Solution ->  \n",
    "class vehicle:\n",
    "    def __init__(self,name,speed,average):\n",
    "        self.__name = name\n",
    "        self.__speed = speed\n",
    "        self.__average  = average\n",
    "    def set_name(self,name):\n",
    "        self.__name = name\n",
    "    def get_name(self):\n",
    "        return self.__name\n",
    "    def set_speed(self,speed):\n",
    "        self.__speed = speed\n",
    "    def get_speed(self):\n",
    "        return self.__speed\n",
    "    def set_average (self,average ):\n",
    "        self._average = average\n",
    "    def get_average(self):\n",
    "        return self.__average\n",
    "        \n",
    "        \n",
    "Question2 -> Create a child class car from the vehicle class created in Que 1, which will inherit the vehicle class.\n",
    "             Create a method named seating_capacity which takes capacity as an argument and returns the name of\n",
    "             the vehicle and its seating capacity.\n",
    "             \n",
    "Solution ->  \n",
    "class vahicle:\n",
    "    def vehicle(self):\n",
    "        return (\"information\")\n",
    "        \n",
    "class car(vahicle):\n",
    "    def name(self):  \n",
    "        print(\"car name is Fortuner\")  \n",
    "    def seating_capacity(self):  \n",
    "        return(\"car seating capacity is 7\")  \n",
    "v = car()  \n",
    "v.name()  \n",
    "v.seating_capacity() \n",
    "\n",
    "\n",
    "Question3 -> What is multiple inheritance? Write a python code to demonstrate multiple inheritance.\n",
    "\n",
    "Solution -> Inheritance is the mechanism to achieve the re-usability of code as one class(child class) can derive the properties of another             class(parent class). It also provides transitivity ie. if class C inherits from P then all the sub-classes of C would also                   inherit from P.\n",
    "\n",
    "Multiple Inheritance - \n",
    "When a class is derived from more than one base class it is called multiple Inheritance. The derived class inherits all the features of the base case.\n",
    "\n",
    "Syntax ->\n",
    "Class Base1:\n",
    "       Body of the class\n",
    "\n",
    "Class Base2:\n",
    "     Body of the class\n",
    "\n",
    "Class Derived(Base1, Base2):\n",
    "     Body of the class\n",
    "     \n",
    "Example ->\n",
    "class Class1:\n",
    "    def m(self):\n",
    "        print(\"In Class1\")\n",
    "       \n",
    "class Class2(Class1):\n",
    "    def m(self):\n",
    "        print(\"In Class2\")\n",
    " \n",
    "class Class3(Class1):\n",
    "    def m(self):\n",
    "        print(\"In Class3\") \n",
    "        \n",
    "class Class4(Class2, Class3):\n",
    "    pass  \n",
    "     \n",
    "obj = Class4()\n",
    "obj.m()\n",
    "\n",
    "\n",
    "question4 -> What are getter and setter in python? Create a class and create a getter and a setter method in this\n",
    "class.\n",
    "\n",
    "Solution -> In Python, getters and setters are not the same as those in other object-oriented programming languages. Basically, the main                 purpose of using getters and setters in object-oriented programs is to ensure data encapsulation. Private variables in python               are not actually hidden fields like in other object oriented languages. Getters and Setters in python are often used when:\n",
    "\n",
    "We use getters & setters to add validation logic around getting and setting a value.\n",
    "To avoid direct access of a class field i.e. private variables cannot be accessed directly or modified by external user.\n",
    "\n",
    "Example ->\n",
    "class test:\n",
    "    def __init__(self, age = 0):\n",
    "         self._age = age\n",
    "    def get_age(self):\n",
    "        return self._age\n",
    "    def set_age(self, x):\n",
    "        self._age = x\n",
    "  \n",
    "raj = test()\n",
    "raj.set_age(21)\n",
    "print(raj.get_age()) \n",
    "print(raj._age)\n",
    "\n",
    "\n",
    "Question5 -> What is method overriding in python? Write a python code to demonstrate method overriding.\n",
    "\n",
    "Solution -> Method overriding in Python is when you have two methods with the same name that each perform different tasks. This is an                   important feature of inheritance in Python. In method overriding, the child class can change its functions that are defined by               its ancestral classes.\n",
    "In other words, the child class has access to the properties and functions of the parent class method while also extending additional functions of its own to the method. If a method in a superclass coincides with that of a subclass, then the subclass is said to override the superclass.\n",
    "\n",
    "Example ->\n",
    "class Employee:\n",
    "    def __init__(self, name, base_pay):\n",
    "        self.name = name\n",
    "        self.base_pay = base_pay\n",
    "    def get_pay(self):\n",
    "        return self.base_pay\n",
    "        \n",
    "class SalesEmployee(Employee):\n",
    "        def __init__(self, name, base_pay, sales_incentive):\n",
    "            self.name = name\n",
    "            self.base_pay = base_pay\n",
    "            self.sales_incentive = sales_incentive\n",
    "                \n",
    "        \n",
    "john = SalesEmployee('John', 5000, 1500)\n",
    "\n",
    "john.get_pay()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
